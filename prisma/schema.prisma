generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ListingStatus {
  ACTIVE
  PAUSED
  REMOVED
}

enum BookingStatus {
  PENDING
  APPROVED
  ACTIVE
  RETURNED
  COMPLETED
  CANCELLED
  DISPUTE
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  stripeCustomerId String?

  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  listings      Listing[]
  bookings      Booking[] @relation("borrowerBookings")
  notifications Notification[]
}

model Profile {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  bio       String?
  rating    Float   @default(0)
  phone     String?
  avatarUrl String?
  verified  Boolean @default(false)
}

model Listing {
  id            String        @id @default(cuid())
  ownerId       String
  owner         User          @relation(fields: [ownerId], references: [id])
  title         String
  slug          String        @unique
  description   String
  category      String
  pricePerDay   Float
  depositAmount Float
  location      Json
  images        String[]
  availability  Json
  status        ListingStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  bookings      Booking[]
  rating        Float         @default(0)
}

model Booking {
  id                      String        @id @default(cuid())
  listingId               String
  listing                 Listing       @relation(fields: [listingId], references: [id])
  borrowerId              String
  borrower                User          @relation("borrowerBookings", fields: [borrowerId], references: [id])
  startDate               DateTime
  endDate                 DateTime
  totalAmount             Float
  depositHeld             Float
  status                  BookingStatus @default(PENDING)
  stripePaymentIntentId   String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  rating     Int
  comment    String?
  reviewerId String
  createdAt  DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// --- Authentication Models ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
